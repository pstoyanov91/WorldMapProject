package airports;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;


public class HandleAirportData {

	// List of airports
	private List<Airports> airports = new LinkedList<Airports>();

	// Read airports from file and loads them to a list
	public List<Airports> loadData(String pathToFile) {

		FileReader fileReader = null;
		BufferedReader bufferReader = null;

		try {
			// System.out.println(new java.io.File("").getAbsolutePath());

			fileReader = new FileReader(new File(pathToFile));
			bufferReader = new BufferedReader(fileReader);

			String currLine = null;

			while ((currLine = bufferReader.readLine()) != null) {

				String[] columns = currLine.split(",");

				// System.out.println(Arrays.deepToString(columns));
				int id = Integer.parseInt(columns[0]);
				String city = columns[2].replace("\"", "");
				String country = columns[3].replace("\"", "");
				String code = columns[4].replace("\"", "");

				// System.out.println(id+" " + city + " - " + country + " - " +
				// " " + code );

				// Add airport to the list
				Airports airport = new Airports(id, city, country, code);
				this.airports.add(airport);

			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				bufferReader.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return this.airports;
	}

	// Writes to file
	public void writeDataToFile(String pathToFile) {

		PrintStream fileWriter = null;
		try {
			fileWriter = new PrintStream(pathToFile);

			for (Airports airport : this.airports) {
				String line = airport.getId() + " - " + airport.getCity() + " - " + airport.getCountry() + " - "
						+ airport.getCode3();
				fileWriter.println(line);
			}
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			fileWriter.flush();
			fileWriter.close();
		}

	}

	/*
	 * Linear search algorithm for finding
	 * 
	 * city code in array of airports
	 * 
	 */

	public Airports findAirportLinear(String city) {

		for (Airports airport : this.airports) {

			String airportCity = airport.getCity();

			if (airportCity.equals(city)) {
				return airport;
			}
		}

		return null;
	}

	/*
	 * Binary search algorithm for finding city code in array of airports.
	 * 
	 * IMPORTANT: The array has to be sorted!
	 */
	public Airports findAirportBinary(String city) {
		int low = 0;
		int high = this.airports.size() - 1;
		int mid;

		while (low <= high) {

			/*
			 * First we subtract low from high to get the range and then we add
			 * it to low. So this means (high - low) is the range and then we
			 * add it to low to get the position of this range
			 * 
			 * We do this instead of (high+low)/2 so that we can escape
			 * overflowing when the array is really big and adding high + low
			 * could exceed the integer value range.
			 */
			mid = low + (high - low) / 2;

			// Find if a the city we're trying to find is alphabetically less.
			int compare = city.compareTo(this.airports.get(mid).getCity());

			if (compare < 0) {
				high = mid - 1;
			} else if (compare > 0) {
				low = mid + 1;
			} else {
				return this.airports.get(mid);
			}
		}

		return null;

	}
	
	private void writeArrDataToFile(String pathToFile, Airports[] arr) {

		PrintStream fileWriter = null;
		try {
			fileWriter = new PrintStream(pathToFile);

			for (Airports airport : arr) {
				String line = airport.getId() + " - " + airport.getCity() + " - " + airport.getCountry() + " - "
						+ airport.getCode3();
				fileWriter.println(line);
			}
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			fileWriter.flush();
			fileWriter.close();
		}

	}

	public void sortByCitySelectionAlgorithm() {
		int listSize = this.airports.size();
		Airports[] airportsArray = new Airports[listSize];

		for (int i = 0; i < listSize; ++i) {
			airportsArray[i] = this.airports.get(i);
		}
		writeArrDataToFile("data/arrOutput", airportsArray);
		int arrSize = airportsArray.length;

		for (int i = 0; i < arrSize - 1; ++i) {
			int minIndex = i;
			for (int j = i + 1; j < arrSize; ++j) {
				int compare = airportsArray[minIndex].getCity().compareTo(airportsArray[j].getCity());
				if (compare > 0) {
					minIndex = j;
				}
			}
			swap(airportsArray, i, minIndex);
		}
		writeArrDataToFile("data/arrOutput2", airportsArray);
	}

	// Getter
	public List<Airports> getAirports() {
		return this.airports;
	}

	public Airports getElement(int index) {
		return this.airports.get(index);
	}

	private void swap(Airports[] arr, int i, int j) {
		Airports temElement = arr[i];
		
		arr[i].setId(arr[j].getId());
		arr[i].setCity(arr[j].getCity());
		arr[i].setCode3(arr[j].getCode3());
		arr[i].setCountry(arr[j].getCountry());
		
		arr[j].setId(temElement.getId());
		arr[j].setCountry(temElement.getCountry());
		arr[j].setCode3(temElement.getCode3());
		arr[j].setCity(temElement.getCity());

	}

}
